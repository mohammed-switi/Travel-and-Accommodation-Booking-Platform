name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - staging  
      - main
  pull_request:
    branches:
      - develop
      - staging
      - main

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: github.event_name == 'push'
        with:
          file: '**/coverage.cobertura.xml'
          fail_ci_if_error: false

  docker-build-push:
    name: Build & Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag & push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: travel-booking-platform
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Determine environment
        id: env
        run: |
          case "${{ github.ref_name }}" in
            main)      echo "ENV=production" >> $GITHUB_ENV ;;
            staging)   echo "ENV=staging" >> $GITHUB_ENV ;;
            develop)   echo "ENV=development" >> $GITHUB_ENV ;;
            *)         echo "ENV=development" >> $GITHUB_ENV ;;
          esac

      - name: Deploy to ECS
        run: |
          CLUSTER_NAME="travel-booking-cluster-${ENV}"
          SERVICE_NAME="travel-booking-service-${ENV}"
          
          echo "Deploying to cluster=$CLUSTER_NAME service=$SERVICE_NAME"
          
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          CLUSTER_NAME="travel-booking-cluster-${ENV}"
          SERVICE_NAME="travel-booking-service-${ENV}"
          
          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME" \
            --region ${{ secrets.AWS_REGION }}

      - name: Send success notification
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "‚úÖ Travel Booking Platform Deployment Succeeded"
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.EMAIL_TO }}
          body: |
            üéâ **Deployment Successful!**
            
            **Project:** Travel and Accommodation Booking Platform
            **Environment:** ${{ env.ENV }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Deployed by:** ${{ github.actor }}
            
            **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send failure notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "‚ùå Travel Booking Platform Deployment Failed"
          from: ${{ secrets.EMAIL_FROM }}
          to: ${{ secrets.EMAIL_TO }}
          body: |
            üö® **Deployment Failed!**
            
            **Project:** Travel and Accommodation Booking Platform
            **Environment:** ${{ env.ENV }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.actor }}
            
            **Check Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
