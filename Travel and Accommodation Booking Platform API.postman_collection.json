{
	"info": {
		"_postman_id": "803f138f-d585-41ed-98b1-bde5f017ccf5",
		"name": "Travel and Accommodation Booking Platform API",
		"description": "Complete API collection for the Travel and Accommodation Booking Platform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33084085"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Store user data if available in response",
									"    if (responseJson.userId) {",
									"        pm.collectionVariables.set('userId', responseJson.userId);",
									"    }",
									"    ",
									"    if (responseJson.token || responseJson.accessToken) {",
									"        pm.collectionVariables.set('accessToken', responseJson.token || responseJson.accessToken);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"    const randomEmail = pm.variables.replaceIn('{{$randomEmail}}');",
									"    const randomPassword = pm.variables.replaceIn('{{$randomPassword}}');",
									"    pm.environment.set(\"myEmail\", randomEmail);",
									"    pm.environment.set(\"myPassword\", randomPassword);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fullName\": \"{{$randomFullName}}\",\n  \"email\": \"{{myEmail}}\",\n  \"password\": \"{{myPassword}}\",\n  \"confirmPassword\": \"{{myPassword}}\"\n}\n\n\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response contains token', function () {",
									"        pm.expect(responseJson).to.have.any.keys(['token', 'accessToken', 'access_token']);",
									"    });",
									"    ",
									"    // Store access token for subsequent requests",
									"    if (responseJson.token) {",
									"        pm.collectionVariables.set('accessToken', responseJson.token);",
									"    } else if (responseJson.accessToken) {",
									"        pm.collectionVariables.set('accessToken', responseJson.accessToken);",
									"    } else if (responseJson.access_token) {",
									"        pm.collectionVariables.set('accessToken', responseJson.access_token);",
									"    }",
									"    ",
									"    // Store user ID if available",
									"    if (responseJson.userId || responseJson.user?.id) {",
									"        pm.collectionVariables.set('userId', responseJson.userId || responseJson.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{myEmail}}\",\n  \"password\": \"{{myPassword}}\"\n}\n// {\n//     \"email\":\"mosowity@gmail.com\",\n//     \"password\": \"switi.1417\"\n// }"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"NewSecurePassword123!\",\n  \"confirmPassword\": \"NewSecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear access token on successful logout",
									"if (pm.response.code === 200) {",
									"    pm.collectionVariables.set('accessToken', '');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cities",
			"item": [
				{
					"name": "Get All Cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response should be an array or contain data array', function () {",
									"        pm.expect(responseJson).to.satisfy(function(response) {",
									"            return Array.isArray(response) || Array.isArray(response.data);",
									"        });",
									"    });",
									"    ",
									"    // Store first city ID for further testing",
									"    const cities = Array.isArray(responseJson) ? responseJson : responseJson.data;",
									"    if (cities && cities.length > 0 && cities[0].id) {",
									"        pm.collectionVariables.set('cityId', cities[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cities?page=1&pageSize=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cities"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Store created city ID",
									"    if (responseJson.id) {",
									"        pm.collectionVariables.set('cityId', responseJson.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{$randomCity}}\",\n  \"country\": \"{{$randomCountry}}\",\n  \"postOffice\": \"{{$randomStreetName}} Post Office\"\n}\n\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/cities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get City by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response contains city details', function () {",
									"        pm.expect(responseJson).to.have.property('name');",
									"        pm.expect(responseJson).to.have.property('country');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cities/{{cityId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cities",
								"{{cityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Dubai Updated\",\n  \"country\": \"United Arab Emirates\",\n  \"postOffice\": \"Dubai Central Post Office\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/cities/{{cityId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cities",
								"{{cityId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/cities/{{cityId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cities",
								"{{cityId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hotels",
			"item": [
				{
					"name": "Get All Hotels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Store first hotel ID for further testing",
									"    const hotels = Array.isArray(responseJson) ? responseJson : responseJson.data;",
									"    if (hotels && hotels.length > 0 && hotels[0].id) {",
									"        pm.collectionVariables.set('hotelId', hotels[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/hotels?page=1&pageSize=10&includeInactive=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"hotels"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "includeInactive",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Hotel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    let hotelIds = pm.environment.get(\"hotelIds\");",
									"    hotelIds = hotelIds ? JSON.parse(hotelIds) : [];",
									"",
									"    // Store created hotel ID",
									"    let hotelId= responseJson.id;",
									"    if (hotelId) {",
									"       hotelIds.push(hotelId);",
									"       pm.environment.set(\"hotelIds\", JSON.stringify(hotelIds));",
									"",
									"    }",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Sample data pools",
									"const hotelPrefixes = [\"Luxury\", \"Grand\", \"Elite\", \"Royal\", \"Sunset\", \"Oceanview\", \"Palm\", \"Skyline\"];",
									"const cities = [\"Dubai\", \"Cairo\", \"Istanbul\", \"Amman\", \"Beirut\", \"Riyadh\", \"Doha\"];",
									"const areas = [\"Downtown\", \"Harbor\", \"City Center\", \"Beachfront\", \"Old Town\", \"Business Bay\", \"Hill District\"];",
									"const descriptions = [",
									"  \"A luxurious 5-star hotel in the heart of the city.\",",
									"  \"An elegant hotel offering premium comfort and top-notch service.\",",
									"  \"A modern retreat with spectacular views and amenities.\",",
									"  \"Boutique hotel designed for both comfort and style.\",",
									"  \"Your gateway to luxury in the most iconic location.\"",
									"];",
									"const imageUrls = [",
									"  \"https://example.com/hotel1.jpg\",",
									"  \"https://example.com/hotel2.jpg\",",
									"  \"https://example.com/hotel3.jpg\",",
									"  \"https://example.com/hotel4.jpg\",",
									"  \"https://example.com/hotel5.jpg\"",
									"];",
									"",
									"// Helper to pick random item from array",
									"const pick = arr => arr[Math.floor(Math.random() * arr.length)];",
									"",
									"// Generate variables",
									"const city = pick(cities);",
									"const hotelName = `${pick(hotelPrefixes)} ${city} Hotel`;",
									"const location = `${pick(areas)} ${city}`;",
									"const description = pick(descriptions);",
									"const starRating = (Math.random() * 2 + 3).toFixed(1); // between 3.0 and 5.0",
									"const imageUrl = pick(imageUrls);",
									"const amenities = Math.floor(Math.random() * 128); // bitmask up to 255 (if 8 amenities)",
									"const ownerId = Math.floor(Math.random() * 104) + 1; // 1 to 104",
									"",
									"// Set environment variables",
									"pm.environment.set(\"hotelName\", hotelName);",
									"pm.environment.set(\"hotelCity\", city);",
									"pm.environment.set(\"hotelLocation\", location);",
									"pm.environment.set(\"hotelDescription\", description);",
									"pm.environment.set(\"hotelStarRating\", starRating);",
									"pm.environment.set(\"hotelImageUrl\", imageUrl);",
									"pm.environment.set(\"hotelAmenities\", amenities);",
									"pm.environment.set(\"hotelOwnerId\", ownerId);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{hotelName}}\",\n  \"city\": \"{{hotelCity}}\",\n  \"location\": \"{{hotelLocation}}\",\n  \"description\": \"{{hotelDescription}}\",\n  \"starRating\": {{hotelStarRating}},\n  \"imageUrl\": \"{{hotelImageUrl}}\",\n  \"amenities\": {{hotelAmenities}},\n  \"ownerId\": {{hotelOwnerId}}\n}\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/hotels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"hotels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Hotels",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set dynamic dates for search",
									"const checkInDate = new Date();",
									"checkInDate.setDate(checkInDate.getDate() + 7); // 7 days from now",
									"",
									"const checkOutDate = new Date();",
									"checkOutDate.setDate(checkOutDate.getDate() + 10); // 10 days from now",
									"",
									"pm.collectionVariables.set('checkInDate', checkInDate.toISOString());",
									"pm.collectionVariables.set('checkOutDate', checkOutDate.toISOString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response contains search results', function () {",
									"        pm.expect(responseJson).to.satisfy(function(response) {",
									"            return Array.isArray(response) || response.results || response.data;",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"location\": \"Dubai\",\n  \"checkInDate\": \"{{checkInDate}}\",\n  \"checkOutDate\": \"{{checkOutDate}}\",\n  \"adults\": 2,\n  \"children\": 0,\n  \"rooms\": 1,\n  \"minPrice\": 100,\n  \"maxPrice\": 1000,\n  \"starRating\": 4,\n  \"amenities\": [1, 2, 4],\n  \"roomTypes\": [0, 1]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/hotels/search",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"hotels",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hotel by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set dynamic dates for hotel details",
									"const checkInDate = new Date();",
									"checkInDate.setDate(checkInDate.getDate() + 7);",
									"",
									"const checkOutDate = new Date();",
									"checkOutDate.setDate(checkOutDate.getDate() + 10);",
									"",
									"pm.collectionVariables.set('checkInDate', checkInDate.toISOString());",
									"pm.collectionVariables.set('checkOutDate', checkOutDate.toISOString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response contains hotel details', function () {",
									"        pm.expect(responseJson).to.have.property('name');",
									"        pm.expect(responseJson).to.have.property('city');",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/hotels/{{hotelId}}?checkIn={{checkInDate}}&checkOut={{checkOutDate}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"hotels",
								"{{hotelId}}"
							],
							"query": [
								{
									"key": "checkIn",
									"value": "{{checkInDate}}"
								},
								{
									"key": "checkOut",
									"value": "{{checkOutDate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hotel Admin by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/hotels/{{hotelId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"hotels",
								"{{hotelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Hotel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Luxury Dubai Hotel\",\n  \"city\": \"Dubai\",\n  \"location\": \"Downtown Dubai - Updated Location\",\n  \"description\": \"An updated luxurious 5-star hotel in the heart of Dubai\",\n  \"starRating\": 5.0,\n  \"imageUrl\": \"https://example.com/updated-hotel-image.jpg\",\n  \"amenities\": 255\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/hotels/{{hotelId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"hotels",
								"{{hotelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Hotel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/hotels/{{hotelId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"hotels",
								"{{hotelId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rooms",
			"item": [
				{
					"name": "Get All Rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Store first room ID for further testing",
									"    const rooms = Array.isArray(responseJson) ? responseJson : responseJson.data;",
									"    if (rooms && rooms.length > 0 && rooms[0].id) {",
									"        pm.collectionVariables.set('roomId', rooms[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/rooms?page=1&pageSize=10&includeInactive=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rooms"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "includeInactive",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    // Parse the response JSON",
									"    const roomId = pm.response.json().id;  // adjust if your response uses a different field name",
									"",
									"    // Get existing list from environment or initialize empty",
									"    let roomIds = pm.environment.get(\"roomIds\");",
									"    roomIds = roomIds ? JSON.parse(roomIds) : [];",
									"",
									"    // Add the new room ID",
									"    roomIds.push(roomId);",
									"",
									"    // Save back to environment variable as JSON string",
									"    pm.environment.set(\"roomIds\", JSON.stringify(roomIds));",
									"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the stored hotel IDs array from environment",
									"const hotelIdsJson = pm.environment.get(\"hotelIds\") || pm.environment.get(\"createdHotelIds\");",
									"",
									"if (!hotelIdsJson) {",
									"    throw new Error(\"No hotel IDs found in environment variable 'hotelIds' or 'createdHotelIds'\");",
									"}",
									"",
									"const hotelIds = JSON.parse(hotelIdsJson);",
									"",
									"// Pick a random hotelId from the list",
									"const randomHotelId = hotelIds[Math.floor(Math.random() * hotelIds.length)];",
									"",
									"// RoomType enum values from your backend",
									"const roomTypes = [\"Standard\", \"Deluxe\", \"Suite\", \"Budget\", \"Boutique\", \"Family\"];",
									"",
									"// Pick a random room type",
									"const randomRoomType = roomTypes[Math.floor(Math.random() * roomTypes.length)];",
									"",
									"// Random price between 50 and 500",
									"const randomPrice = (Math.random() * (500 - 50) + 50).toFixed(2);",
									"",
									"// Random max adults between 1 and 4",
									"const randomMaxAdults = Math.floor(Math.random() * 4) + 1;",
									"",
									"// Random max children between 0 and 3",
									"const randomMaxChildren = Math.floor(Math.random() * 4);",
									"",
									"// Random available quantity between 1 and 10",
									"const randomAvailableQuantity = Math.floor(Math.random() * 10) + 1;",
									"",
									"// Random room number between 100 and 999",
									"const randomRoomNumber = Math.floor(Math.random() * 900 + 100).toString();",
									"",
									"// Set Postman variables for the request body",
									"pm.variables.set(\"randomHotelId\", randomHotelId);",
									"pm.variables.set(\"randomRoomType\", randomRoomType);",
									"pm.variables.set(\"randomPrice\", randomPrice);",
									"pm.variables.set(\"randomMaxAdults\", randomMaxAdults);",
									"pm.variables.set(\"randomMaxChildren\", randomMaxChildren);",
									"pm.variables.set(\"randomAvailableQuantity\", randomAvailableQuantity);",
									"pm.variables.set(\"randomRoomNumber\", randomRoomNumber);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"hotelId\": \"{{randomHotelId}}\",\n  \"roomType\": \"{{randomRoomType}}\",\n  \"price\": {{randomPrice}},\n  \"maxAdults\": {{randomMaxAdults}},\n  \"maxChildren\": {{randomMaxChildren}},\n  \"availableQuantity\": {{randomAvailableQuantity}},\n  \"roomNumber\": \"{{randomRoomNumber}}\",\n  \"imageUrl\": \"https://example.com/room-image.jpg\"\n}\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/rooms",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rooms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Room by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response contains room details', function () {",
									"        pm.expect(responseJson).to.have.property('roomType');",
									"        pm.expect(responseJson).to.have.property('price');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/rooms/{{roomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rooms",
								"{{roomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roomType\": \"Updated Deluxe Suite\",\n  \"price\": 349.99,\n  \"maxAdults\": 3,\n  \"maxChildren\": 2,\n  \"availableQuantity\": 3\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/rooms/{{roomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rooms",
								"{{roomId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/rooms/{{roomId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"rooms",
								"{{roomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Get Shopping Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bookings/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bookings",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get stored room IDs from environment variable (JSON array string)",
									"const roomIdsJson = pm.environment.get(\"roomIds\");",
									"",
									"if (!roomIdsJson) {",
									"    throw new Error(\"No room IDs found in environment variable 'roomIds'\");",
									"}",
									"",
									"const roomIds = JSON.parse(roomIdsJson);",
									"",
									"// Pick a random roomId",
									"const randomRoomId = roomIds[Math.floor(Math.random() * roomIds.length)];",
									"",
									"// Generate random check-in date (between today and 30 days from now)",
									"const today = new Date();",
									"const randomCheckInOffset = Math.floor(Math.random() * 30); // days offset from today",
									"const checkInDate = new Date(today);",
									"checkInDate.setDate(today.getDate() + randomCheckInOffset);",
									"",
									"// Generate random stay length between 1 and 7 days",
									"const stayLength = Math.floor(Math.random() * 7) + 1;",
									"const checkOutDate = new Date(checkInDate);",
									"checkOutDate.setDate(checkInDate.getDate() + stayLength);",
									"",
									"// Format dates as full ISO 8601 datetime string in UTC",
									"function formatDateTime(d) {",
									"  return d.toISOString();",
									"}",
									"",
									"// Set variables for request body with full DateTime strings",
									"pm.environment.set(\"roomId\", randomRoomId);",
									"pm.environment.set(\"checkInDate\", formatDateTime(checkInDate));",
									"pm.environment.set(\"checkOutDate\", formatDateTime(checkOutDate));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Store cart item ID if available",
									"    if (responseJson.id) {",
									"        pm.collectionVariables.set('cartItemId', responseJson.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\n//   \"roomId\": \"{{roomId}}\",\n//   \"checkInDate\": \"{{checkInDate}}\",\n//   \"checkOutDate\": \"{{checkOutDate}}\"\n// }\n{\n  \"roomId\": \"{{roomId}}\",\n  \"checkInDate\": \"2025-07-09T10:13:55.539Z\",\n  \"checkOutDate\": \"2025-07-10T10:13:55.539Z\"\n}\n"
						},
						"url": {
							"raw": "{{baseUrl}}/api/bookings/cart/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bookings",
								"cart",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove from Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bookings/cart/remove/{{cartItemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bookings",
								"cart",
								"remove",
								"{{cartItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Checkout Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Store booking details",
									"    if (responseJson.id) {",
									"        pm.collectionVariables.set('bookingId', responseJson.id);",
									"    }",
									"    if (responseJson.reference) {",
									"        pm.collectionVariables.set('bookingReference', responseJson.reference);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contactName\": \"Mohammed Sowaity\",\n  \"contactPhone\": \"+970593015525\",\n  \"contactEmail\": \"switi.2003@gmail.com\",\n  \"paymentMethod\": \"Credit Card\",\n  \"specialRequests\": \"Late check-in requested\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/bookings/checkout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bookings",
								"checkout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response contains booking details', function () {",
									"        pm.expect(responseJson).to.have.property('id');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bookings/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bookings",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Booking by Reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response contains booking details', function () {",
									"        pm.expect(responseJson).to.have.property('reference');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bookings/reference/{{bookingReference}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bookings",
								"reference",
								"{{bookingReference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response should be an array or contain data array', function () {",
									"        pm.expect(responseJson).to.satisfy(function(response) {",
									"            return Array.isArray(response) || Array.isArray(response.data);",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/bookings/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"bookings",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Home",
			"item": [
				{
					"name": "Get Featured Deals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response should contain deals data', function () {",
									"        pm.expect(responseJson).to.satisfy(function(response) {",
									"            return Array.isArray(response) || response.deals || response.data;",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/home/featured-deals",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"home",
								"featured-deals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Recently Viewed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/home/recently-viewed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"home",
								"recently-viewed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Trending Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is JSON', function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    ",
									"    pm.test('Response should contain destinations data', function () {",
									"        pm.expect(responseJson).to.satisfy(function(response) {",
									"            return Array.isArray(response) || response.destinations || response.data;",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/home/trending-destinations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"home",
								"trending-destinations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Setup & Teardown",
			"item": [
				{
					"name": "Setup Test Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This script can be used to set up test data",
									"// Add any initialization logic here",
									"console.log('Setting up test data...');",
									"",
									"// Set default test values",
									"pm.collectionVariables.set('testEmail', 'test.user@example.com');",
									"pm.collectionVariables.set('testPassword', 'TestPassword123!');",
									"pm.collectionVariables.set('resetToken', 'sample-reset-token-12345');",
									"",
									"// Set test booking reference if not exists",
									"if (!pm.collectionVariables.get('bookingReference')) {",
									"    pm.collectionVariables.set('bookingReference', 'BOOK-12345-ABCDE');",
									"}",
									"",
									"// Set test IDs if not exists",
									"if (!pm.collectionVariables.get('cartItemId')) {",
									"    pm.collectionVariables.set('cartItemId', '1');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test data setup completed', function () {",
									"    pm.expect(pm.collectionVariables.get('testEmail')).to.not.be.empty;",
									"    pm.expect(pm.collectionVariables.get('testPassword')).to.not.be.empty;",
									"    console.log('Test data setup completed successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/home/featured-deals",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"home",
								"featured-deals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clean Up Test Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This script can be used to clean up test data",
									"console.log('Cleaning up test data...');",
									"",
									"// Note: In a real scenario, you might want to delete test records",
									"// created during the test run. This could involve API calls to",
									"// delete test cities, hotels, rooms, bookings, etc.",
									"",
									"// For now, we'll just clear some variables",
									"pm.collectionVariables.unset('bookingId');",
									"pm.collectionVariables.unset('bookingReference');",
									"pm.collectionVariables.unset('cartItemId');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cleanup completed', function () {",
									"    console.log('Test data cleanup completed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "Get Review By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reviews/{{reviewId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reviews",
								"{{reviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hotel Reviews",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reviews/hotel/{{hotelId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reviews",
								"hotel",
								"{{hotelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Reviews",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reviews/user/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reviews",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Reviews",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reviews/user/my-reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reviews",
								"user",
								"my-reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hotel Review Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reviews/hotel/{{hotelId}}/summary",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reviews",
								"hotel",
								"{{hotelId}}",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get If User Can Review",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reviews/hotel/{{hotelId}}/can-review",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reviews",
								"hotel",
								"{{hotelId}}",
								"can-review"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post A Review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									"const randomRating = Math.floor(Math.random() * 5) + 1;",
									"",
									"// Array of realistic comments",
									"const comments = [",
									"    \"Great stay, very clean and comfortable!\",",
									"    \"The staff were friendly and helpful.\",",
									"    \"Would definitely book again.\",",
									"    \"Location was perfect but room was noisy.\",",
									"    \"Amazing experience, highly recommended!\",",
									"    \"Room was small but well-maintained.\",",
									"    \"Excellent service and tasty breakfast.\",",
									"    \"Not worth the price.\",",
									"    \"Very relaxing environment and great amenities.\",",
									"    \"Check-in was slow but overall a good stay.\"",
									"];",
									"",
									"const randomComment = comments[Math.floor(Math.random() * comments.length)];",
									"",
									"pm.environment.set(\"rating\", randomRating);",
									"pm.environment.set(\"comment\", randomComment);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"hotelId\": \"{{hotelId}}\",\n  \"rating\": \"{{rating}}\",\n  \"comment\": \"{{comment}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// This runs before every request in the collection",
					"",
					"// Add timestamp for dynamic values",
					"pm.globals.set('timestamp', new Date().getTime());",
					"",
					"// Add random number for unique values",
					"pm.globals.set('randomNumber', Math.floor(Math.random() * 10000));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"// This runs after every request in the collection",
					"",
					"// Common response time test",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Common content type test for successful requests",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test('Content-Type is application/json', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5222",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookingId",
			"value": "",
			"type": "string"
		},
		{
			"key": "hotelId",
			"value": "",
			"type": "string"
		},
		{
			"key": "cityId",
			"value": "",
			"type": "string"
		},
		{
			"key": "checkInDate",
			"value": ""
		},
		{
			"key": "checkOutDate",
			"value": ""
		}
	]
}